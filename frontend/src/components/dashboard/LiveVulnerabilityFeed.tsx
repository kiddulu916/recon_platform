import { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import { useWebSocket } from '../../hooks/useWebSocket';
import Card from '../common/Card';
import Badge from '../common/Badge';
import type { VulnerabilityDetectedMessage } from '../../types';

interface VulnerabilityWithTimestamp extends VulnerabilityDetectedMessage {
  timestamp: string;
}

interface LiveVulnerabilityFeedProps {
  maxItems?: number;
  domainId?: number;
}

const LiveVulnerabilityFeed = ({ maxItems = 20, domainId }: LiveVulnerabilityFeedProps) => {
  const { subscribe, isConnected } = useWebSocket({
    domainId,
    autoConnect: true
  });
  const [vulnerabilities, setVulnerabilities] = useState<VulnerabilityWithTimestamp[]>([]);

  useEffect(() => {
    const unsubscribe = subscribe<VulnerabilityDetectedMessage>('vulnerability_detected', (data) => {
      console.log('Vulnerability detected:', data);

      setVulnerabilities((prev) => {
        const newVuln: VulnerabilityWithTimestamp = {
          ...data,
          timestamp: new Date().toISOString()
        };

        // Add to beginning and keep only maxItems
        return [newVuln, ...prev].slice(0, maxItems);
      });
    });

    return unsubscribe;
  }, [subscribe, maxItems]);

  const getSeverityBadgeVariant = (severity: string): 'danger' | 'warning' | 'info' | 'default' => {
    const lower = severity.toLowerCase();
    if (lower === 'critical' || lower === 'high') return 'danger';
    if (lower === 'medium') return 'warning';
    if (lower === 'low') return 'info';
    return 'default';
  };

  const getSeverityColor = (severity: string): string => {
    const lower = severity.toLowerCase();
    if (lower === 'critical') return 'from-red-50 to-transparent dark:from-red-900/10';
    if (lower === 'high') return 'from-orange-50 to-transparent dark:from-orange-900/10';
    if (lower === 'medium') return 'from-yellow-50 to-transparent dark:from-yellow-900/10';
    if (lower === 'low') return 'from-blue-50 to-transparent dark:from-blue-900/10';
    return 'from-gray-50 to-transparent dark:from-gray-900/10';
  };

  const getSeverityIcon = (severity: string): string => {
    const lower = severity.toLowerCase();
    if (lower === 'critical') return 'ðŸ”´';
    if (lower === 'high') return 'ðŸŸ ';
    if (lower === 'medium') return 'ðŸŸ¡';
    if (lower === 'low') return 'ðŸ”µ';
    return 'âšª';
  };

  const criticalCount = vulnerabilities.filter(v => v.severity.toLowerCase() === 'critical').length;
  const highCount = vulnerabilities.filter(v => v.severity.toLowerCase() === 'high').length;

  return (
    <Card
      title={
        <div className="flex items-center justify-between">
          <span>Live Vulnerability Detections</span>
          <div className="flex items-center gap-2">
            {criticalCount > 0 && (
              <Badge variant="danger">Critical: {criticalCount}</Badge>
            )}
            {highCount > 0 && (
              <Badge variant="warning">High: {highCount}</Badge>
            )}
            <div className={`w-2 h-2 rounded-full ${isConnected ? 'bg-green-500 animate-pulse' : 'bg-gray-400'}`} />
          </div>
        </div>
      }
    >
      {vulnerabilities.length === 0 ? (
        <div className="text-center py-8 text-gray-500 dark:text-gray-400">
          <div className="mb-2">No vulnerabilities detected yet</div>
          <div className="text-xs">
            {isConnected ? 'Connected and monitoring' : 'Not connected'}
          </div>
        </div>
      ) : (
        <div className="space-y-3 max-h-96 overflow-y-auto">
          {vulnerabilities.map((vuln, idx) => (
            <div
              key={`${vuln.vulnerability_id}-${idx}`}
              className={`border border-gray-200 dark:border-gray-700 rounded-lg p-3 bg-gradient-to-r ${getSeverityColor(vuln.severity)} animate-fade-in`}
            >
              <div className="flex items-start justify-between gap-2 mb-2">
                <div className="flex items-start gap-2 flex-1 min-w-0">
                  <span className="text-lg">{getSeverityIcon(vuln.severity)}</span>
                  <div className="flex-1 min-w-0">
                    <div className="flex items-center gap-2 mb-1 flex-wrap">
                      <h4 className="font-semibold text-gray-900 dark:text-white text-sm">
                        {vuln.name}
                      </h4>
                      <Badge variant={getSeverityBadgeVariant(vuln.severity)}>
                        {vuln.severity}
                      </Badge>
                    </div>

                    <div className="font-mono text-xs text-gray-600 dark:text-gray-400 mb-1 truncate">
                      {vuln.subdomain}
                    </div>

                    <div className="flex items-center gap-2 mt-2">
                      <span className="text-xs px-2 py-0.5 bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-400 rounded">
                        {vuln.vulnerability_type}
                      </span>
                    </div>
                  </div>
                </div>

                <div className="text-xs text-gray-500 dark:text-gray-400 whitespace-nowrap">
                  {new Date(vuln.timestamp).toLocaleTimeString()}
                </div>
              </div>

              <div className="flex justify-end">
                <Link
                  to={`/vulnerabilities/${vuln.vulnerability_id}`}
                  className="text-xs text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300 font-medium"
                >
                  View Details â†’
                </Link>
              </div>
            </div>
          ))}
        </div>
      )}

      {vulnerabilities.length > 0 && (
        <div className="mt-4 pt-4 border-t border-gray-200 dark:border-gray-700">
          <Link
            to="/vulnerabilities"
            className="text-sm text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300 font-medium"
          >
            View All Vulnerabilities â†’
          </Link>
        </div>
      )}
    </Card>
  );
};

export default LiveVulnerabilityFeed;
