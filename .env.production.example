# Security Reconnaissance Platform - Production Environment Configuration
#
# IMPORTANT: This is a production configuration template.
# 1. Copy this file: cp .env.production.example .env.production
# 2. Replace all CHANGE_ME values with actual credentials
# 3. Generate strong secrets using the commands provided
# 4. Secure the file: chmod 600 .env.production
# 5. NEVER commit .env.production to version control

# ============================================================================
# DATABASE CONFIGURATION (Production - PostgreSQL)
# ============================================================================

# PostgreSQL connection string for production
# The DATABASE_URL uses environment variable substitution for the password
DATABASE_URL=postgresql+asyncpg://recon:${DB_PASSWORD}@postgres:5432/recon

# PostgreSQL password (REQUIRED - MUST CHANGE)
# Generate with: openssl rand -base64 32
DB_PASSWORD=CHANGE_ME_GENERATE_STRONG_PASSWORD

# Database pool settings (production tuned)
DB_POOL_SIZE=20
DB_MAX_OVERFLOW=40
DB_POOL_TIMEOUT=30
DB_ECHO=false

# ============================================================================
# SECURITY (CRITICAL - MUST CONFIGURE)
# ============================================================================

# JWT secret key for authentication (REQUIRED - MUST CHANGE)
# Generate with: openssl rand -base64 64
JWT_SECRET_KEY=CHANGE_ME_GENERATE_RANDOM_STRING

# Enable encryption for stored API keys (recommended)
ENCRYPTION_ENABLED=true

# Master encryption key (auto-generated if not provided, but recommended to set)
# Generate with: openssl rand -base64 32
# RECON_MASTER_KEY=

# ============================================================================
# SCANNING CONFIGURATION (Production Settings)
# ============================================================================

# Scan profile: passive (slowest), normal (balanced), aggressive (fastest)
# Recommendation: normal for production, aggressive only for authorized pentests
SCAN_PROFILE=normal

# Rate limiting (requests per second)
# Adjust based on your infrastructure and authorization level
GLOBAL_RATE_LIMIT=50
DOMAIN_RATE_LIMIT=20

# Timeouts (in seconds)
DNS_TIMEOUT=5
PORT_SCAN_TIMEOUT=2
HTTP_TIMEOUT=10

# ============================================================================
# TOOLS CONFIGURATION
# ============================================================================

# Tools directory (Docker container path)
TOOLS_DIRECTORY=/tools/bin

# Recursion settings
ENABLE_RECURSION=true
RECURSION_DEPTH=3

# Scan phase toggles
ENABLE_HORIZONTAL=true
ENABLE_PASSIVE=true
ENABLE_ACTIVE=true
ENABLE_WEB_PROBING=true

# ============================================================================
# WEB DISCOVERY (Intelligent Crawling & API Discovery)
# ============================================================================

# Enable intelligent web discovery
ENABLE_WEB_DISCOVERY=true

# Crawler settings (production limits)
CRAWLER_MAX_DEPTH=5
CRAWLER_MAX_PAGES=1000
CRAWLER_TIMEOUT=10

# Directory enumeration
DIRECTORY_ENUM_ENABLED=true
DIRECTORY_ENUM_LEARNING=true

# API discovery
API_DISCOVERY_ENABLED=true
API_DISCOVERY_JS_ANALYSIS=true
API_DISCOVERY_GRAPHQL_INTROSPECTION=true
API_DISCOVERY_MAX_JS_FILES=50

# Web discovery rate limiting
WEB_DISCOVERY_RATE_LIMIT=5
WEB_DISCOVERY_MAX_SUBDOMAINS=10

# ============================================================================
# VULNERABILITY INTELLIGENCE (AI-Powered Analysis)
# ============================================================================

# Enable vulnerability intelligence system
ENABLE_VULNERABILITY_INTELLIGENCE=true

# Vulnerability correlation
VULN_CORRELATION_ENABLED=true
VULN_RULE_BASED_DETECTION=true
VULN_ML_DETECTION=true

# Exploit matching
EXPLOIT_MATCHING_ENABLED=true
AUTO_SYNC_EXPLOIT_DB=false
EXPLOIT_DB_SYNC_INTERVAL_DAYS=7

# Risk scoring
RISK_SCORING_ENABLED=true
RISK_SCORING_AUTO_RECALCULATE=false
RISK_SCORING_CONSIDER_BUSINESS_CONTEXT=true

# Pattern learning
PATTERN_LEARNING_ENABLED=true
MIN_TRAINING_SAMPLES=20
AUTO_RETRAIN_PATTERNS=true

# Intelligence thresholds
VULN_MIN_CONFIDENCE=0.6
EXPLOIT_MIN_RELIABILITY=0.5
RISK_CRITICAL_THRESHOLD=90

# ============================================================================
# PATTERN RECOGNITION & VULNERABILITY CHAINING
# ============================================================================

# Enable unified pattern recognition system
ENABLE_PATTERN_RECOGNITION=true
PATTERN_TEMPORAL_ENABLED=true
PATTERN_SPATIAL_ENABLED=true
PATTERN_BEHAVIORAL_ENABLED=true
PATTERN_CHAINING_ENABLED=true
PATTERN_PREDICTIVE_ENABLED=true

# Pattern recognition parameters
PATTERN_TIME_WINDOW_DAYS=30
PATTERN_LOOKBACK_DAYS=7
PATTERN_MAX_CHAIN_LENGTH=5
PATTERN_MIN_CONFIDENCE=0.7

# Vulnerability chaining
VULN_CHAINING_ENABLED=true
VULN_CHAINING_MIN_CHAIN_LENGTH=2
VULN_CHAINING_MAX_CHAIN_LENGTH=5
VULN_CHAINING_MIN_RISK_SCORE=40

# ============================================================================
# EXTERNAL API KEYS (Optional - Configure as needed)
# ============================================================================

# WhoIsXMLAPI for company acquisition discovery
# Register at: https://whoisxmlapi.com/
# WHOISXML_API_KEY=your_api_key_here

# Censys for Certificate Transparency log scanning
# Register at: https://censys.io/
# CENSYS_API_ID=your_api_id_here
# CENSYS_API_SECRET=your_api_secret_here

# BufferOver for CT log scanning
# Register at: https://tls.bufferover.run/
# BUFFEROVER_API_KEY=your_api_key_here

# GitHub token for github-subdomains tool
# Generate at: https://github.com/settings/tokens
# GITHUB_TOKEN=your_github_token_here

# SecurityTrails
# Register at: https://securitytrails.com/
# SECURITYTRAILS_API_KEY=your_api_key_here

# Shodan
# Register at: https://www.shodan.io/
# SHODAN_API_KEY=your_api_key_here

# VirusTotal
# Register at: https://www.virustotal.com/
# VIRUSTOTAL_API_KEY=your_api_key_here

# ============================================================================
# LOGGING (Production Settings)
# ============================================================================

# Log level: DEBUG, INFO, WARNING, ERROR, CRITICAL
# Recommendation: INFO for production, WARNING for high-traffic systems
LOG_LEVEL=INFO

# ============================================================================
# APPLICATION SETTINGS
# ============================================================================

# Server host and port (Docker internal)
HOST=0.0.0.0
PORT=8000

# Disable hot reload in production
RELOAD=false

# ============================================================================
# FRONTEND CONFIGURATION (Docker Internal URLs)
# ============================================================================

# API and WebSocket URLs for frontend (Docker internal network)
VITE_API_URL=http://backend:8000
VITE_WS_URL=ws://backend:8000

# ============================================================================
# RESOURCE LIMITS (Configured in docker-compose.prod.yaml)
# ============================================================================

# Resource limits are set in docker-compose.prod.yaml:
# - Backend: 4 CPUs, 4GB RAM
# - PostgreSQL: 2 CPUs, 2GB RAM
# - Frontend: 1 CPU, 512MB RAM
# - Mitmproxy: 2 CPUs, 1GB RAM
# - Tools: 1 CPU, 512MB RAM
#
# Adjust in docker-compose.prod.yaml if needed based on your infrastructure

# ============================================================================
# PRODUCTION DEPLOYMENT CHECKLIST
# ============================================================================

# Before deploying to production, ensure:
# ✓ Replace DB_PASSWORD with strong password (openssl rand -base64 32)
# ✓ Replace JWT_SECRET_KEY with strong secret (openssl rand -base64 64)
# ✓ Configure external API keys (optional but recommended)
# ✓ Set appropriate SCAN_PROFILE (normal recommended)
# ✓ Adjust rate limits based on authorization level
# ✓ Set LOG_LEVEL to INFO or WARNING
# ✓ Secure file permissions: chmod 600 .env.production
# ✓ Never commit .env.production to version control
# ✓ Set up regular backups using ./scripts/backup.sh
# ✓ Review and adjust resource limits in docker-compose.prod.yaml
# ✓ Test database connection before starting scans
# ✓ Install security tools: docker-compose exec backend python main.py --install-tools

# ============================================================================
# SUPPORT & DOCUMENTATION
# ============================================================================

# For deployment instructions, see:
# - docs/DOCKER_DEPLOYMENT.md
# - CLAUDE.md
# - README.md
#
# Quick start:
# 1. Copy this file: cp .env.production.example .env.production
# 2. Edit and set all CHANGE_ME values: nano .env.production
# 3. Start production: ./scripts/prod-start.sh
# 4. Backup regularly: ./scripts/backup.sh
