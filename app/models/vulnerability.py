"""
Vulnerability tracking and correlation models
These store identified security issues and their relationships
"""

from sqlalchemy import Column, String, Integer, DateTime, Boolean, ForeignKey, Text, Float, Index
from sqlalchemy.orm import relationship
from datetime import datetime
from app.core.database import Base


class Vulnerability(Base):
    """Identified vulnerabilities in the target infrastructure"""
    __tablename__ = "vulnerabilities"
    
    id = Column(Integer, primary_key=True)
    
    # Vulnerability identification
    type = Column(String(50), nullable=False)  # XSS, SQLi, RCE, etc.
    severity = Column(String(20))  # Critical, High, Medium, Low
    cvss_score = Column(Float)
    cve_id = Column(String(50))
    cwe_id = Column(String(50))
    
    # Location information
    domain_id = Column(Integer, ForeignKey("domains.id"))
    subdomain_id = Column(Integer, ForeignKey("subdomains.id"))
    ip_id = Column(Integer, ForeignKey("ip_addresses.id"))
    port_id = Column(Integer, ForeignKey("ports.id"))
    
    # Vulnerability details
    title = Column(String(500), nullable=False)
    description = Column(Text)
    affected_component = Column(String(255))
    affected_version = Column(String(100))
    
    # Evidence and reproduction
    evidence = Column(Text)  # Proof of vulnerability
    reproduction_steps = Column(Text)  # How to reproduce
    request_sample = Column(Text)  # Sample request that triggers it
    response_sample = Column(Text)  # Sample vulnerable response
    
    # Exploitation information
    exploitable = Column(Boolean, default=False)
    exploit_available = Column(Boolean, default=False)
    exploit_url = Column(String(500))
    exploitation_complexity = Column(String(20))  # Low, Medium, High
    
    # Remediation
    remediation = Column(Text)
    references = Column(Text)  # JSON array of reference URLs
    
    # Status tracking
    status = Column(String(20), default="new")  # new, confirmed, false_positive, fixed
    discovered_at = Column(DateTime, default=datetime.utcnow)
    confirmed_at = Column(DateTime)
    fixed_at = Column(DateTime)
    
    # AI analysis
    confidence_score = Column(Float)  # 0-100 AI confidence
    ai_reasoning = Column(Text)  # AI's analysis of why this is vulnerable
    
    # Relationships
    port = relationship("Port", back_populates="vulnerabilities")
    http_vulnerabilities = relationship("HTTPVulnerability", back_populates="vulnerability")
    vulnerability_chain = relationship("VulnerabilityChain", 
                                     foreign_keys="VulnerabilityChain.vulnerability_id",
                                     back_populates="vulnerability")
    
    __table_args__ = (
        Index("idx_vuln_severity", "severity"),
        Index("idx_vuln_type", "type"),
        Index("idx_vuln_status", "status"),
        Index("idx_vuln_domain", "domain_id"),
    )


class HTTPVulnerability(Base):
    """Links vulnerabilities to specific HTTP traffic"""
    __tablename__ = "http_vulnerabilities"
    
    id = Column(Integer, primary_key=True)
    vulnerability_id = Column(Integer, ForeignKey("vulnerabilities.id", ondelete="CASCADE"))
    http_traffic_id = Column(Integer, ForeignKey("http_traffic.id", ondelete="CASCADE"))
    
    # Specific vulnerability indicators in the traffic
    vulnerable_parameter = Column(String(255))
    vulnerable_header = Column(String(255))
    injection_point = Column(String(100))  # URL, header, body, cookie
    
    # Pattern that identified the vulnerability
    detection_pattern = Column(String(500))
    matched_content = Column(Text)
    
    # Relationships
    vulnerability = relationship("Vulnerability", back_populates="http_vulnerabilities")
    http_traffic = relationship("HTTPTraffic", back_populates="vulnerabilities")
    
    __table_args__ = (
        Index("idx_http_vuln", "vulnerability_id", "http_traffic_id", unique=True),
    )


class VulnerabilityChain(Base):
    """Represents chains of vulnerabilities that combine for greater impact"""
    __tablename__ = "vulnerability_chains"
    
    id = Column(Integer, primary_key=True)
    chain_id = Column(String(100), nullable=False)  # Unique identifier for the chain
    vulnerability_id = Column(Integer, ForeignKey("vulnerabilities.id", ondelete="CASCADE"))
    
    # Chain metadata
    position = Column(Integer)  # Order in the chain
    role = Column(String(100))  # What this vuln contributes to the chain
    
    # Combined impact
    chain_severity = Column(String(20))  # Overall severity when combined
    chain_description = Column(Text)
    exploitation_path = Column(Text)  # Step-by-step exploitation
    
    # Relationships
    vulnerability = relationship("Vulnerability", back_populates="vulnerability_chain")
    
    __table_args__ = (
        Index("idx_chain_id", "chain_id"),
        Index("idx_chain_vuln", "chain_id", "vulnerability_id", unique=True),
    )


class CVEDatabase(Base):
    """Synchronized CVE database for vulnerability matching"""
    __tablename__ = "cve_database"

    id = Column(Integer, primary_key=True)
    cve_id = Column(String(50), unique=True, nullable=False, index=True)

    # CVE details
    description = Column(Text)
    published_date = Column(DateTime)
    last_modified = Column(DateTime)

    # Severity scoring
    cvss_v2_score = Column(Float)
    cvss_v3_score = Column(Float)
    cvss_vector = Column(String(200))
    severity = Column(String(20))  # Critical, High, Medium, Low

    # Affected products/versions
    affected_vendors = Column(Text)  # JSON array
    affected_products = Column(Text)  # JSON array
    affected_versions = Column(Text)  # JSON array
    version_patterns = Column(Text)  # JSON array of regex patterns

    # CWE classification
    cwe_ids = Column(Text)  # JSON array

    # Exploitation
    exploit_available = Column(Boolean, default=False)
    exploit_maturity = Column(String(50))  # Proof of concept, Functional, High
    exploitdb_ids = Column(Text)  # JSON array of Exploit-DB IDs
    metasploit_modules = Column(Text)  # JSON array

    # References
    references = Column(Text)  # JSON array of URLs

    # Metadata
    source = Column(String(50))  # NVD, MITRE, etc.
    last_synced = Column(DateTime, default=datetime.utcnow)

    __table_args__ = (
        Index("idx_cve_severity", "severity"),
        Index("idx_cve_exploit", "exploit_available"),
    )


class ExploitDatabase(Base):
    """Database of known exploits"""
    __tablename__ = "exploit_database"

    id = Column(Integer, primary_key=True)
    exploit_id = Column(String(100), unique=True, nullable=False, index=True)

    # Exploit information
    title = Column(String(500), nullable=False)
    description = Column(Text)
    source = Column(String(50))  # ExploitDB, Metasploit, GitHub, etc.
    url = Column(String(500))

    # Associated vulnerabilities
    cve_ids = Column(Text)  # JSON array

    # Target information
    platform = Column(String(100))  # Windows, Linux, Web, etc.
    application = Column(String(255))
    version = Column(String(100))

    # Exploit characteristics
    exploit_type = Column(String(50))  # Remote, Local, DoS, etc.
    reliability = Column(String(20))  # Excellent, Good, Average, Low
    impact = Column(String(50))  # Code execution, privilege escalation, etc.

    # Requirements
    authentication_required = Column(Boolean, default=False)
    prerequisites = Column(Text)  # JSON array
    complexity = Column(String(20))  # Low, Medium, High

    # Exploit code
    has_code = Column(Boolean, default=False)
    code_language = Column(String(50))

    # Metadata
    author = Column(String(255))
    published_date = Column(DateTime)
    verified = Column(Boolean, default=False)
    last_synced = Column(DateTime, default=datetime.utcnow)

    __table_args__ = (
        Index("idx_exploit_type", "exploit_type"),
        Index("idx_exploit_platform", "platform"),
        Index("idx_exploit_reliability", "reliability"),
    )


class VulnerabilityPattern(Base):
    """Machine learning patterns for vulnerability detection"""
    __tablename__ = "vulnerability_patterns"

    id = Column(Integer, primary_key=True)

    # Pattern identification
    pattern_name = Column(String(255), nullable=False)
    pattern_type = Column(String(50), nullable=False)  # rule_based, ml_model, heuristic
    vulnerability_type = Column(String(50))  # What kind of vuln this detects

    # Pattern definition
    pattern_data = Column(Text, nullable=False)  # JSON pattern definition
    confidence_threshold = Column(Float, default=0.7)

    # ML model data (if applicable)
    model_type = Column(String(50))  # anomaly_detection, classification, etc.
    model_features = Column(Text)  # JSON array of feature names
    model_parameters = Column(Text)  # JSON serialized model params

    # Performance metrics
    true_positives = Column(Integer, default=0)
    false_positives = Column(Integer, default=0)
    true_negatives = Column(Integer, default=0)
    false_negatives = Column(Integer, default=0)
    accuracy = Column(Float)
    precision = Column(Float)
    recall = Column(Float)
    f1_score = Column(Float)

    # Pattern metadata
    active = Column(Boolean, default=True, index=True)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    last_trained = Column(DateTime)

    __table_args__ = (
        Index("idx_vulnerability_pattern_type", "pattern_type"),
        Index("idx_pattern_vuln_type", "vulnerability_type"),
        Index("idx_pattern_active", "active"),
    )


class RiskScore(Base):
    """Context-aware risk scores for vulnerabilities"""
    __tablename__ = "risk_scores"

    id = Column(Integer, primary_key=True)
    vulnerability_id = Column(Integer, ForeignKey("vulnerabilities.id", ondelete="CASCADE"), unique=True)

    # Technical risk factors
    cvss_score = Column(Float)  # Base CVSS score
    exploit_availability_score = Column(Float)  # 0-10
    exploit_reliability_score = Column(Float)  # 0-10
    attack_complexity_score = Column(Float)  # 0-10 (inverse of complexity)

    # Environmental factors
    exposure_score = Column(Float)  # How exposed is this asset? 0-10
    asset_criticality_score = Column(Float)  # How critical is the affected asset? 0-10
    data_sensitivity_score = Column(Float)  # Sensitivity of accessible data 0-10

    # Contextual factors
    authentication_required_penalty = Column(Float)  # Reduces score if auth needed
    network_access_score = Column(Float)  # Network/Adjacent/Local
    user_interaction_penalty = Column(Float)  # Reduces if user interaction needed

    # Business impact
    business_impact_score = Column(Float)  # Potential business impact 0-10
    compliance_impact_score = Column(Float)  # Compliance/regulatory impact 0-10

    # Final scores
    technical_risk_score = Column(Float)  # Weighted technical factors
    environmental_risk_score = Column(Float)  # Weighted environmental factors
    final_risk_score = Column(Float, index=True)  # Overall risk 0-100
    risk_category = Column(String(20))  # Critical, High, Medium, Low

    # AI-adjusted scores
    ai_adjustment_factor = Column(Float, default=1.0)  # AI multiplier based on learning
    ai_reasoning = Column(Text)  # Why AI adjusted the score

    # Metadata
    calculated_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

    # Relationship
    vulnerability = relationship("Vulnerability")

    __table_args__ = (
        Index("idx_risk_final_score", "final_risk_score"),
        Index("idx_risk_category", "risk_category"),
    )


class VulnerabilityFeedback(Base):
    """User feedback for ML training and pattern refinement"""
    __tablename__ = "vulnerability_feedback"

    id = Column(Integer, primary_key=True)
    vulnerability_id = Column(Integer, ForeignKey("vulnerabilities.id", ondelete="CASCADE"))

    # Feedback data
    is_true_positive = Column(Boolean, nullable=False)
    severity_correct = Column(Boolean)
    suggested_severity = Column(String(20))

    # Detailed feedback
    comments = Column(Text)
    tags = Column(Text)  # JSON array of user-defined tags

    # Pattern that detected this
    pattern_id = Column(Integer, ForeignKey("vulnerability_patterns.id"))
    pattern_confidence_at_detection = Column(Float)

    # User information
    reviewed_by = Column(String(100))
    reviewed_at = Column(DateTime, default=datetime.utcnow)

    # Learning impact
    used_for_training = Column(Boolean, default=False)
    training_weight = Column(Float, default=1.0)

    # Relationships
    vulnerability = relationship("Vulnerability")
    pattern = relationship("VulnerabilityPattern")

    __table_args__ = (
        Index("idx_feedback_true_positive", "is_true_positive"),
        Index("idx_feedback_pattern", "pattern_id"),
        Index("idx_feedback_training", "used_for_training"),
    )


class AttackChain(Base):
    """
    Vulnerability chains that form complete attack paths

    Represents multi-step attack scenarios where vulnerabilities combine
    for greater impact than individual findings.
    """
    __tablename__ = "attack_chains"

    id = Column(Integer, primary_key=True)
    chain_id = Column(String(100), unique=True, nullable=False, index=True)

    # Chain metadata
    name = Column(String(500), nullable=False)
    description = Column(Text)
    attack_type = Column(String(100))  # account_takeover, data_exfiltration, privilege_escalation, etc.

    # Severity and impact
    combined_severity = Column(String(20))  # Combined severity of chain
    combined_cvss = Column(Float)
    impact_description = Column(Text)

    # Attack path
    steps = Column(Text, nullable=False)  # JSON array of attack steps
    prerequisites = Column(Text)  # JSON array of what's needed
    attack_graph = Column(Text)  # JSON graph representation

    # Exploitation
    exploitation_complexity = Column(String(20))  # Low, Medium, High
    exploitation_likelihood = Column(Float)  # 0-1 probability of success
    required_skills = Column(String(50))  # Novice, Intermediate, Advanced, Expert
    time_to_exploit = Column(String(50))  # Estimated time needed

    # Business impact
    data_exposure = Column(Boolean, default=False)
    system_compromise = Column(Boolean, default=False)
    service_disruption = Column(Boolean, default=False)
    reputation_damage = Column(Boolean, default=False)

    # Discovery metadata
    discovered_at = Column(DateTime, default=datetime.utcnow, index=True)
    discovered_by = Column(String(50))  # pattern_recognition, manual, etc.
    confidence_score = Column(Float)  # 0-1 confidence in chain

    # Status
    status = Column(String(20), default="new", index=True)  # new, confirmed, mitigated, false_positive
    validated_at = Column(DateTime)
    validated_by = Column(String(100))

    __table_args__ = (
        Index("idx_chain_severity", "combined_severity"),
        Index("idx_chain_type", "attack_type"),
        Index("idx_chain_status", "status"),
    )


class AttackChainStep(Base):
    """Individual steps in an attack chain"""
    __tablename__ = "attack_chain_steps"

    id = Column(Integer, primary_key=True)
    chain_id = Column(String(100), ForeignKey("attack_chains.chain_id", ondelete="CASCADE"), nullable=False)
    vulnerability_id = Column(Integer, ForeignKey("vulnerabilities.id", ondelete="CASCADE"))

    # Step information
    step_number = Column(Integer, nullable=False)
    step_name = Column(String(255), nullable=False)
    step_description = Column(Text)

    # Technical details
    technique = Column(String(100))  # MITRE ATT&CK technique
    action = Column(Text)  # What attacker does
    expected_result = Column(Text)  # What this step achieves

    # Requirements
    requires_previous_steps = Column(Boolean, default=True)
    required_data = Column(Text)  # JSON array of data needed from previous steps

    # Relationship
    attack_chain = relationship("AttackChain")
    vulnerability = relationship("Vulnerability")

    __table_args__ = (
        Index("idx_chain_step", "chain_id", "step_number"),
    )


class PatternRecognition(Base):
    """
    Detected patterns across multiple dimensions

    Temporal, spatial, and behavioral patterns that indicate
    potential vulnerabilities or attack vectors.
    """
    __tablename__ = "pattern_recognitions"

    id = Column(Integer, primary_key=True)
    pattern_id = Column(String(100), unique=True, nullable=False, index=True)

    # Pattern classification
    pattern_category = Column(String(50), nullable=False)  # temporal, spatial, behavioral
    pattern_type = Column(String(100), nullable=False)  # time_based_auth_weakness, shared_infrastructure, etc.
    pattern_name = Column(String(255), nullable=False)

    # Pattern details
    description = Column(Text)
    evidence = Column(Text, nullable=False)  # JSON array of evidence
    affected_assets = Column(Text)  # JSON array of affected subdomains/IPs/ports

    # Pattern characteristics
    frequency = Column(Integer)  # How often pattern appears
    consistency = Column(Float)  # How consistent the pattern is (0-1)
    anomaly_score = Column(Float)  # How anomalous (0-1, higher = more unusual)

    # Temporal information (if applicable)
    time_window_start = Column(DateTime)
    time_window_end = Column(DateTime)
    time_pattern = Column(String(50))  # hourly, daily, weekly, monthly

    # Spatial information (if applicable)
    relationship_type = Column(String(100))  # shared_auth, common_framework, linked_subdomains
    relationship_graph = Column(Text)  # JSON graph of relationships

    # Behavioral information (if applicable)
    baseline_behavior = Column(Text)  # JSON baseline
    observed_behavior = Column(Text)  # JSON observed
    deviation_score = Column(Float)  # How much it deviates from baseline

    # Security implications
    risk_level = Column(String(20))  # Critical, High, Medium, Low
    potential_vulnerabilities = Column(Text)  # JSON array of potential vuln types
    exploitation_scenarios = Column(Text)  # JSON array of scenarios

    # Discovery metadata
    discovered_at = Column(DateTime, default=datetime.utcnow, index=True)
    last_observed = Column(DateTime, default=datetime.utcnow)
    observation_count = Column(Integer, default=1)

    # Status
    status = Column(String(20), default="active", index=True)
    validated = Column(Boolean, default=False)
    false_positive = Column(Boolean, default=False)

    __table_args__ = (
        Index("idx_pattern_category", "pattern_category"),
        Index("idx_pattern_recognition_type", "pattern_type"),
        Index("idx_pattern_risk", "risk_level"),
    )


class PredictiveInsight(Base):
    """
    Predictive insights based on observed patterns and intelligence

    Suggests likely vulnerabilities based on technology stack,
    configuration patterns, and historical data.
    """
    __tablename__ = "predictive_insights"

    id = Column(Integer, primary_key=True)
    insight_id = Column(String(100), unique=True, nullable=False, index=True)

    # Insight classification
    insight_type = Column(String(100), nullable=False)  # vulnerability_prediction, attack_vector, misconfig_likely
    category = Column(String(50))  # framework_specific, technology_based, pattern_based

    # Prediction
    prediction = Column(Text, nullable=False)
    reasoning = Column(Text, nullable=False)  # Why we think this
    confidence = Column(Float, nullable=False)  # 0-1 confidence level

    # Target
    target_domain_id = Column(Integer, ForeignKey("domains.id"))
    target_subdomain_id = Column(Integer, ForeignKey("subdomains.id"))
    target_component = Column(String(255))  # Specific component/path

    # Supporting evidence
    evidence_patterns = Column(Text)  # JSON array of pattern IDs
    technology_indicators = Column(Text)  # JSON array of tech stack indicators
    similar_cases = Column(Text)  # JSON array of similar historical findings

    # Suggested actions
    suggested_tests = Column(Text)  # JSON array of tests to run
    test_priority = Column(String(20))  # Critical, High, Medium, Low
    expected_findings = Column(Text)  # What we expect to find

    # Validation
    validated = Column(Boolean, default=False)
    validation_result = Column(String(50))  # confirmed, refuted, inconclusive
    actual_findings = Column(Text)  # JSON of what was actually found

    # Metadata
    generated_at = Column(DateTime, default=datetime.utcnow, index=True)
    generated_by = Column(String(50))  # Which analysis generated this
    tested_at = Column(DateTime)

    # Relationships
    domain = relationship("Domain")
    subdomain = relationship("Subdomain")

    __table_args__ = (
        Index("idx_insight_type", "insight_type"),
        Index("idx_insight_confidence", "confidence"),
        Index("idx_insight_priority", "test_priority"),
    )
