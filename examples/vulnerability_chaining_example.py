"""
Vulnerability Chaining Engine - Example Usage

This example demonstrates how to use the vulnerability chaining engine
to discover complete attack chains from individual vulnerabilities.
"""

import asyncio
from sqlalchemy.ext.asyncio import AsyncSession
from app.core.database import DatabaseManager
from app.intelligence.pattern_recognition.chaining_engine import VulnerabilityChainingEngine


async def analyze_domain_chains(domain_id: int):
    """
    Analyze a domain for vulnerability chains

    Args:
        domain_id: ID of the domain to analyze
    """

    # Initialize database
    db_manager = DatabaseManager("sqlite+aiosqlite:///./data/recon.db")
    await db_manager.initialize()

    # Create session
    async with db_manager.session() as session:
        # Initialize chaining engine
        engine = VulnerabilityChainingEngine()

        print(f"Analyzing domain {domain_id} for vulnerability chains...")

        # Run analysis
        results = await engine.analyze_domain(
            domain_id=domain_id,
            db_session=session,
            max_chain_length=5  # Maximum 5 vulnerabilities per chain
        )

        # Print summary
        print("\n" + "="*80)
        print("VULNERABILITY CHAIN ANALYSIS RESULTS")
        print("="*80)
        print(f"\nDomain ID: {results['domain_id']}")
        print(f"Vulnerabilities Analyzed: {results['vulnerabilities_analyzed']}")
        print(f"Patterns Analyzed: {results['patterns_analyzed']}")
        print(f"Attack Graph Nodes: {results['graph_nodes']}")
        print(f"Attack Graph Edges: {results['graph_edges']}")
        print(f"\nChains Found: {results['chains_found']}")
        print(f"  - Critical: {results['critical_chains']}")
        print(f"  - High: {results['high_chains']}")

        # Print detailed chain information
        if results['chains']:
            print("\n" + "="*80)
            print("DETAILED CHAIN INFORMATION")
            print("="*80)

            for i, chain in enumerate(results['chains'][:5], 1):  # Show top 5 chains
                print(f"\n[{i}] {chain['chain_name']}")
                print(f"    Severity: {chain['severity']}")
                print(f"    Risk Score: {chain['risk_score']:.2f}")
                print(f"    Priority: {chain['priority']}/10")
                print(f"    Chain Length: {chain['chain_length']} vulnerabilities")
                print(f"    Feasibility: {chain['feasibility']:.2%}")
                print(f"    Impact: {chain['impact_score']:.2f}")
                print(f"    Required Skills: {chain['required_skills']}")
                print(f"    Estimated Time: {chain['estimated_time']}")
        else:
            print("\nNo vulnerability chains found.")
            print("This could mean:")
            print("  - Less than 2 vulnerabilities discovered")
            print("  - No vulnerabilities can be chained together")
            print("  - All chains below minimum risk threshold")


async def get_chain_details(chain_id: int):
    """
    Get detailed information about a specific chain

    Args:
        chain_id: ID of the chain to retrieve
    """

    from app.models.pattern import VulnerabilityChain
    from sqlalchemy import select
    import json

    # Initialize database
    db_manager = DatabaseManager("sqlite+aiosqlite:///./data/recon.db")
    await db_manager.initialize()

    async with db_manager.session() as session:
        # Query chain
        result = await session.execute(
            select(VulnerabilityChain).where(VulnerabilityChain.id == chain_id)
        )
        chain = result.scalar_one_or_none()

        if not chain:
            print(f"Chain {chain_id} not found")
            return

        # Print chain details
        print("\n" + "="*80)
        print("VULNERABILITY CHAIN DETAILS")
        print("="*80)
        print(f"\nChain ID: {chain.id}")
        print(f"Name: {chain.chain_name}")
        print(f"Attack Goal: {chain.attack_goal}")
        print(f"Severity: {chain.severity}")
        print(f"Risk Score: {chain.risk_score:.2f}")
        print(f"Priority: {chain.priority}/10")

        print(f"\nDescription:")
        print(f"{chain.description}")

        print(f"\nChain Characteristics:")
        print(f"  - Length: {chain.chain_length} vulnerabilities")
        print(f"  - Complexity: {chain.complexity}")
        print(f"  - Feasibility: {chain.feasibility:.2%}")
        print(f"  - Impact Score: {chain.impact_score:.2f}")
        print(f"  - Required Skills: {chain.required_skills}")
        print(f"  - Estimated Time: {chain.estimated_time}")
        print(f"  - Detection Difficulty: {chain.detection_difficulty}")

        # Print prerequisites
        print(f"\nPrerequisites:")
        prerequisites = json.loads(chain.prerequisites or "[]")
        for prereq in prerequisites:
            print(f"  - {prereq}")

        # Print exploitation steps
        print(f"\nExploitation Steps:")
        steps = json.loads(chain.steps or "[]")
        for step in steps:
            print(f"\n  [{step['step_number']}] {step['step_name']}")
            print(f"      Type: {step['vulnerability_type']}")
            print(f"      Complexity: {step['complexity']}")
            print(f"      Action: {step['action'][:100]}...")
            print(f"      Expected Result: {step['expected_result']}")

            if step.get('requires'):
                print(f"      Requires: {', '.join(step['requires'])}")

            if step.get('provides'):
                print(f"      Provides: {', '.join(step['provides'])}")

        # Print remediation
        print(f"\nRemediation Steps:")
        remediation = json.loads(chain.remediation_steps or "[]")
        for rem_step in remediation:
            print(f"  {rem_step['step']}. {rem_step['action']}")

        print(f"\nDiscovered: {chain.discovered_at}")
        print(f"Verified: {'Yes' if chain.verified else 'No'}")


async def list_chains_by_severity(domain_id: int, severity: str):
    """
    List all chains for a domain filtered by severity

    Args:
        domain_id: Domain to query
        severity: Severity level (Critical, High, Medium, Low)
    """

    from app.models.pattern import VulnerabilityChain
    from sqlalchemy import select, and_

    # Initialize database
    db_manager = DatabaseManager("sqlite+aiosqlite:///./data/recon.db")
    await db_manager.initialize()

    async with db_manager.session() as session:
        # Query chains
        result = await session.execute(
            select(VulnerabilityChain).where(
                and_(
                    VulnerabilityChain.domain_id == domain_id,
                    VulnerabilityChain.severity == severity
                )
            ).order_by(VulnerabilityChain.risk_score.desc())
        )
        chains = result.scalars().all()

        print(f"\n{severity} Severity Chains for Domain {domain_id}")
        print("="*80)

        if not chains:
            print(f"No {severity} severity chains found")
            return

        for chain in chains:
            print(f"\n[{chain.id}] {chain.chain_name}")
            print(f"    Risk Score: {chain.risk_score:.2f}")
            print(f"    Priority: {chain.priority}/10")
            print(f"    Chain Length: {chain.chain_length} vulnerabilities")
            print(f"    Required Skills: {chain.required_skills}")
            print(f"    Estimated Time: {chain.estimated_time}")


# Example usage
if __name__ == "__main__":
    import sys

    print("="*80)
    print("VULNERABILITY CHAINING ENGINE - EXAMPLE")
    print("="*80)

    # Example 1: Analyze domain for chains
    print("\nExample 1: Analyze domain for vulnerability chains")
    print("-" * 80)

    # Replace with actual domain ID
    domain_id = 1

    asyncio.run(analyze_domain_chains(domain_id))

    # Example 2: Get chain details
    # print("\nExample 2: Get detailed chain information")
    # print("-" * 80)
    # asyncio.run(get_chain_details(chain_id=1))

    # Example 3: List chains by severity
    # print("\nExample 3: List critical chains")
    # print("-" * 80)
    # asyncio.run(list_chains_by_severity(domain_id=1, severity="Critical"))
